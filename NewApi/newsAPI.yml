openapi: "3.0.2"
info:
  title: API Golang
  description: Ini adalah API spec untuk belajar API BE 19 Alta
  version: "1.0"
  contact:
    name: Hanapi Bagas Pamungkas
    email: hanafibagas@gmail.com
servers:
  - url: http://127.0.0.1:8000
    description: Local Development
paths:
  /comment:
    post:
      tags:
        - comment
      summary: Add Comment
      description: Add Comment in user posting
      operationId: addComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"

      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "400":
          description: Invalid input
          content:
            aplication/json:
              example:
                message: "Invalid input!"
        "401":
          description: Unauthorized
          content:
            aplication/json:
              example:
                message: "You don't authorize!"
        "404":
          description: Posting not found
          content:
            aplication/json:
              example:
                message: "Posting not found!"
      security:
        - bearerAuth: []

  /comment/{commentId}:
    delete:
      tags:
        - comment
      summary: Delete a comment by ID
      operationId: deleteComment
      parameters:
        - name: commentId
          in: path
          description: ID of the comment to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Comment deleted successfully
          content:
            application/json:
              example:
                message: "Comment berhasil di hapus!"
        "401":
          description: Unauthorized
          content:
            aplication/json:
              example:
                message: "You don't authorize!"
        "404":
          description: Comment not found
          content:
            aplication/json:
              example:
                message: "Comment not found!"
      security:
        - bearerAuth: []

  /comment/{postId}:
    get:
      tags:
        - comment
      summary: menampilkan semua commet by id postingan
      operationId: getCommentsByPostId
      parameters:
        - name: postId
          in: path
          description: ID of the post to get comments for
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommentResponse"
            application/xml:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CommentResponse"
        "404":
          description: Post not found
      security: []

  /posting:
    post:
      tags:
        - posting
      summary: Create postingan
      operationId: createPosting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostingRequest"
      responses:
        "201":
          description: Posting created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PostingResponse"
                  message:
                    type: string
                    example: Posting created successfully!
        "400":
          description: Invalid input
      security:
        - bearerAuth: []
    get:
      tags:
        - posting
      summary: Get all created posting
      operationId: getAllPostings
      responses:
        "200":
          description: Get all created posting
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PostingResponse"
        "401":
          description: Unauthorized
      security: []

  /posting/{id}:
    get:
      tags:
        - posting
      summary: Untuk menampilakan postingan by id
      operationId: getPostingById
      parameters:
        - name: id
          in: path
          description: ID of the posting to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostingRequest"
            application/xml:
              schema:
                $ref: "#/components/schemas/PostingResponse"
        "401":
          description: Unauthorized
        "404":
          description: Posting not found
      security: []

    put:
      tags:
        - posting
      summary: Untuk melakukan update by id
      operationId: updatePostingById
      parameters:
        - name: id
          in: path
          description: ID of the posting to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostingRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/PostingRequest"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostingResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/PostingResponse"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: Posting not found
      security:
        - bearerAuth: []

    delete:
      tags:
        - posting
      summary: Hapus postingan by id
      operationId: deletePostingById
      parameters:
        - name: id
          in: path
          description: ID of the posting to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Successful operation
        "401":
          description: Unauthorized
        "404":
          description: Posting not found
      security:
        - bearerAuth: []

  /login:
    get:
      tags:
        - user
      summary: Login
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          headers:
            X-Rate-Limit:
              description: Calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: Date in UTC when the token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: The user name
                  token:
                    type: string
                    description: The authentication token
        "400":
          description: Invalid username/password supplied
      security:
        - bearerAuth: []

  /users:
    get:
      tags:
        - user
      summary: menampilkan data user
      operationId: getCurrentUser
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
      security:
        - bearerAuth: []

  /register:
    post:
      tags:
        - user
      summary: register user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/xml:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
            application/xml:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid input
        "409":
          description: User already exists
      security: []

  /user/{id}:
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged-in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User deleted successfully
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
        - bearerAuth: []

components:
  schemas:
    CommentRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        user_id:
          type: integer
          example: 12
        comment:
          type: string
          example: Ini Sebuah comment

    CommentResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/CommentRequest"
        message:
          type: string
          example: "Comment added successfully"

    UserResponse:
      type: object
      properties:
        nama:
          type: string
          example: "budi"
        email:
          type: string
          example: "budi2014@gmail.com"

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User

    Image:
      type: object
      properties:
        title:
          type: string
          example: gambar1
        link:
          type: string
          example: https://google.com

    PostingRequest:
      type: object
      properties:
        title:
          type: string
          example: Belajar membaca
        image:
          type: array
          items:
            $ref: "#/components/schemas/Image"
        description:
          type: string
          example: halo dunia tipu tipu!
      required:
        - title

    PostingResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Belajar membaca
        image:
          $ref: "#/components/schemas/Image"
        description:
          type: string
          example: halo dunia tipu tipu!

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
